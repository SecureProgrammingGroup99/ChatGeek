/**
 * generateDummyKeys.js
 * -------------------------------------------
 * Temporary local utility to generate SOCP-spec RSA-4096 dummy keys
 * for sender & recipient. Use ONLY for local development/testing.
 * DO NOT COMMIT to deployment builds.
 *
 * Run:
 *   node generateDummyKeys.js
 *
 * Output:
 *   -> Creates or overwrites: frontend/src/utils/cryptoKeysDummy.js
 */

import fs from "fs";
import { webcrypto } from "node:crypto";
const subtle = webcrypto.subtle;

// ---------- Helpers ----------
function bufToBase64Url(buf) {
  let binary = "";
  const bytes = new Uint8Array(buf);
  for (let i = 0; i < bytes.byteLength; i++)
    binary += String.fromCharCode(bytes[i]);
  return Buffer.from(binary, "binary")
    .toString("base64")
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=+$/, "");
}

// ---------- RSA-OAEP keypair (used for encryption) ----------
async function genRsaPair_OAEP4096() {
  const kp = await subtle.generateKey(
    {
      name: "RSA-OAEP",
      modulusLength: 4096,
      publicExponent: new Uint8Array([1, 0, 1]),
      hash: "SHA-256",
    },
    true,
    ["encrypt", "decrypt"]
  );

  const spki = await subtle.exportKey("spki", kp.publicKey);
  const pkcs8 = await subtle.exportKey("pkcs8", kp.privateKey);

  return {
    pub_spki_b64url: bufToBase64Url(spki),
    priv_pkcs8_b64url: bufToBase64Url(pkcs8),
  };
}

// ---------- RSASSA-PSS keypair (used for signatures) ----------
// ---------- RSASSA-PSS keypair (used for signatures) ----------
async function genRsaPair_PSS4096() {
  const algoPrimary = {
    name: "RSASSA-PSS",
    modulusLength: 4096,
    publicExponent: new Uint8Array([1, 0, 1]),
    hash: "SHA-256",
  };

  const algoFallback = {
    name: "RSA-PSS",
    modulusLength: 4096,
    publicExponent: new Uint8Array([1, 0, 1]),
    hash: "SHA-256",
  };

  try {
    const kp = await subtle.generateKey(algoPrimary, true, ["sign", "verify"]);
    const spki = await subtle.exportKey("spki", kp.publicKey);
    const pkcs8 = await subtle.exportKey("pkcs8", kp.privateKey);
    console.log("[SOCP] Generated RSASSA-PSS signing key (primary)");
    return {
      pub_spki_b64url: bufToBase64Url(spki),
      priv_pkcs8_b64url: bufToBase64Url(pkcs8),
    };
  } catch (err1) {
    console.warn(
      "[SOCP] RSASSA-PSS not supported, retrying with RSA-PSS alias:",
      err1.message
    );
    try {
      const kp = await subtle.generateKey(algoFallback, true, [
        "sign",
        "verify",
      ]);
      const spki = await subtle.exportKey("spki", kp.publicKey);
      const pkcs8 = await subtle.exportKey("pkcs8", kp.privateKey);
      console.log("[SOCP] Generated RSA-PSS signing key (alias)");
      return {
        pub_spki_b64url: bufToBase64Url(spki),
        priv_pkcs8_b64url: bufToBase64Url(pkcs8),
      };
    } catch (err2) {
      console.error(
        "[SOCP] Node WebCrypto does not support PSS at all, aborting:",
        err2
      );
      throw err2;
    }
  }
}

// ---------- Dummy user generator ----------
async function makeDummyUser(userId) {
  const enc = await genRsaPair_OAEP4096();
  const sig = await genRsaPair_PSS4096();

  return {
    user_id: userId,
    // SOCP USER_HELLO fields
    pubkey: sig.pub_spki_b64url, // RSASSA-PSS verify key
    enc_pubkey: enc.pub_spki_b64url, // RSA-OAEP encrypt key
    // Private keys (local only)
    enc_privkey: enc.priv_pkcs8_b64url,
    sig_privkey: sig.priv_pkcs8_b64url,
    sig_pubkey: sig.pub_spki_b64url,
  };
}

// ---------- Main ----------
(async () => {
  console.log("[SOCP] Generating dummy RSA-4096 keypairs...");
  const sender = await makeDummyUser("sender_dummy");
  const recipient = await makeDummyUser("recipient_dummy");

  const output = { sender, recipient };
  const text =
    `// AUTO-GENERATED FILE (temporary)\n` +
    `// Generated by generateDummyKeys.js — delete before deployment\n\n` +
    `export const DUMMY_USERS = ${JSON.stringify(output, null, 2)};\n`;

  const outPath = "./cryptoKeysDummy.js";
  fs.writeFileSync(outPath, text);

  console.log(`[SOCP] ✅ Dummy keys written to ${outPath}`);
  console.log(
    "[SOCP] Preview snippet:\n",
    JSON.stringify(output, null, 2).slice(0, 600) + " ..."
  );
})();
